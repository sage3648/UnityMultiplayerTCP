<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTcp</name>
    </assembly>
    <members>
        <member name="T:SimpleTcp.DisconnectReason">
            <summary>
            Reason why a client disconnected.
            </summary>
        </member>
        <member name="F:SimpleTcp.DisconnectReason.Normal">
            <summary>
            Normal disconnection.
            </summary>
        </member>
        <member name="F:SimpleTcp.DisconnectReason.Kicked">
            <summary>
            Client connection was intentionally terminated programmatically or by the server.
            </summary>
        </member>
        <member name="F:SimpleTcp.DisconnectReason.Timeout">
            <summary>
            Client connection timed out; server did not receive data within the timeout window.
            </summary>
        </member>
        <member name="T:SimpleTcp.TcpClient">
            <summary>
            TCP client with SSL support.  
            Set the Connected, Disconnected, and DataReceived callbacks.  
            Once set, use Connect() to connect to the server.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpClient.Connected">
            <summary>
            Callback to call when the connection is established.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpClient.Disconnected">
            <summary>
            Callback to call when the connection is destroyed.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpClient.DataReceived">
            <summary>
            Callback to call when byte data has become available from the server.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpClient.ReceiveBufferSize">
            <summary>
            Receive buffer size to use while reading from the TCP server.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpClient.ConnectTimeoutSeconds">
            <summary>
            The number of seconds to wait when attempting to connect.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpClient.Debug">
            <summary>
            Enable or disable logging to the console.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpClient.AcceptInvalidCertificates">
            <summary>
            Enable or disable acceptance of invalid SSL certificates.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpClient.MutuallyAuthenticate">
            <summary>
            Enable or disable mutual authentication of SSL client and server.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpClient.IsConnected">
            <summary>
            Indicates whether or not the client is connected to the server.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Instantiates the TCP client.  Set the Connected, Disconnected, and DataReceived callbacks.  Once set, use Connect() to connect to the server.
            </summary>
            <param name="serverIp">The server IP address.</param>
            <param name="port">The TCP port on which to connect.</param>
            <param name="ssl">Enable or disable SSL.</param>
            <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
            <param name="pfxPassword">The password to the PFX certificate file.</param>
        </member>
        <member name="M:SimpleTcp.TcpClient.Dispose">
            <summary>
            Dispose of the TCP client.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpClient.Connect">
            <summary>
            Establish the connection to the server.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpClient.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary> 
            <param name="data">Byte array containing data to send.</param>
        </member>
        <member name="M:SimpleTcp.TcpClient.Send(System.String)">
            <summary>
            Send data to the server.
            </summary>
            <param name="data">String containing data to send.</param>
        </member>
        <member name="T:SimpleTcp.TcpServer">
            <summary>
            TCP server with SSL support.  
            Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  
            Once set, use Start() to begin listening for connections.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpServer.ClientConnected">
            <summary>
            Callback to call when a client connects.  A string containing the client IP:port will be passed.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpServer.ClientDisconnected">
            <summary>
            Callback to call when a client disconnects.  A string containing the client IP:port will be passed.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpServer.DataReceived">
            <summary>
            Callback to call when byte data has become available from the client.  A string containing the client IP:port and a byte array containing the data will be passed.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpServer.ReceiveBufferSize">
            <summary>
            Receive buffer size to use while reading from connected TCP clients.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpServer.IdleClientTimeoutSeconds">
            <summary>
            Maximum amount of time to wait before considering a client idle and disconnecting them. 
            By default, this value is set to 0, which will never disconnect a client due to inactivity.
            The timeout is reset any time a message is received from a client or a message is sent to a client.
            For instance, if you set this value to 30, the client will be disconnected if the server has not received a message from the client within 30 seconds or if a message has not been sent to the client in 30 seconds.
            </summary>
        </member>
        <member name="P:SimpleTcp.TcpServer.Debug">
            <summary>
            Enable or disable logging to the console.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpServer.AcceptInvalidCertificates">
            <summary>
            Enable or disable acceptance of invalid SSL certificates.
            </summary>
        </member>
        <member name="F:SimpleTcp.TcpServer.MutuallyAuthenticate">
            <summary>
            Enable or disable mutual authentication of SSL client and server.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpServer.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Instantiates the TCP server.  Set the ClientConnected, ClientDisconnected, and DataReceived callbacks.  Once set, use Start() to begin listening for connections.
            </summary>
            <param name="listenerIp">The listener IP address.</param>
            <param name="port">The TCP port on which to listen.</param>
            <param name="ssl">Enable or disable SSL.</param>
            <param name="pfxCertFilename">The filename of the PFX certificate file.</param>
            <param name="pfxPassword">The password to the PFX certificate file.</param>
        </member>
        <member name="M:SimpleTcp.TcpServer.Dispose">
            <summary>
            Dispose of the TCP server.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpServer.Start">
            <summary>
            Start the TCP server and begin accepting connections.
            </summary>
        </member>
        <member name="M:SimpleTcp.TcpServer.GetClients">
            <summary>
            Retrieve a list of client IP:port connected to the server.
            </summary>
            <returns>IEnumerable of strings, each containing client IP:port.</returns>
        </member>
        <member name="M:SimpleTcp.TcpServer.IsConnected(System.String)">
            <summary>
            Determines if a client is connected by its IP:port.
            </summary>
            <param name="ipPort">The client IP:port string.</param>
            <returns>True if connected.</returns>
        </member>
        <member name="M:SimpleTcp.TcpServer.Send(System.String,System.Byte[])">
            <summary>
            Send data to the specified client by IP:port.
            </summary>
            <param name="ipPort">The client IP:port string.</param>
            <param name="data">Byte array containing data to send.</param>
        </member>
        <member name="M:SimpleTcp.TcpServer.Send(System.String,System.String)">
            <summary>
            Send data to the specified client by IP:port.
            </summary>
            <param name="ipPort">The client IP:port string.</param>
            <param name="data">String containing data to send.</param>
        </member>
        <member name="M:SimpleTcp.TcpServer.DisconnectClient(System.String)">
            <summary>
            Disconnects the specified client.
            </summary>
            <param name="ipPort">IP:port of the client.</param>
        </member>
    </members>
</doc>
